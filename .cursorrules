# Paradigm

- Emphasize separation of concerns
- Pure functional programming
- Data oriented design
- Prefer Immutable data, but mutation allowed for high performance
- TypeScript
- No classes
- Interfaces implemented by literal objects
- No inheritance

# Linting

- Use modern Typescript.
- End statements with semicolons.
- Use `const` and `let` instead of `var`.
- Use `??` instead of `||` for nullish coalescing.

# Performance

- Do expensive work at initialization time
- Minimize allocations in hot paths
- Avoid string operations in hot paths
- Use numeric indices over string keys where possible

# Data Flow

- Prefer explicit data flow over implicit
- Initialize through defined interfaces
- Maintain single source of truth
- Track state changes explicitly

# Constraints

- DO NOT use any code from /src/internal as it's all legacy.
