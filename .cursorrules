# Stack

pnpm
vite
typescript

# Paradigm

- separation of concerns
- Data oriented
- Functional programming, but prefer performance inside functions, functional interface outside.
- Prefer Immutable data, but mutation allowed for high performance
- No classes, enums or inheritance
- Do not subvert readonly objects, instead use ...splats or other approaches.

# Linting

- Use modern Typescript.
- End statements with semicolons.
- Use `const` and `let` instead of `var`.
- Use `??` instead of `||` for nullish coalescing.

# Testing

- Use pnpm test [filename] --run to make tests exit automatically
- BEFORE FIXING, pause and verify test and implementation and describe which one is in error.
- Focus on concise code coverage and edge cases.
- Unit tests live adjacent to files they test as <my-file>.test.ts


